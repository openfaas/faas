// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package metrics

import (
	"sync"
	"time"
)

var (
	lockMetricsMockGatewayFunctionInvocation sync.RWMutex
	lockMetricsMockGatewayFunctionsHistogram sync.RWMutex
	lockMetricsMockServiceReplicasCounter    sync.RWMutex
)

// MetricsMock is a mock implementation of Metrics.
//
//     func TestSomethingThatUsesMetrics(t *testing.T) {
//
//         // make and configure a mocked Metrics
//         mockedMetrics := &MetricsMock{
//             GatewayFunctionInvocationFunc: func(labels map[string]string)  {
// 	               panic("TODO: mock out the GatewayFunctionInvocation method")
//             },
//             GatewayFunctionsHistogramFunc: func(labels map[string]string, duration time.Duration)  {
// 	               panic("TODO: mock out the GatewayFunctionsHistogram method")
//             },
//             ServiceReplicasCounterFunc: func(labels map[string]string, replicas float64)  {
// 	               panic("TODO: mock out the ServiceReplicasCounter method")
//             },
//         }
//
//         // TODO: use mockedMetrics in code that requires Metrics
//         //       and then make assertions.
//
//     }
type MetricsMock struct {
	// GatewayFunctionInvocationFunc mocks the GatewayFunctionInvocation method.
	GatewayFunctionInvocationFunc func(labels map[string]string)

	// GatewayFunctionsHistogramFunc mocks the GatewayFunctionsHistogram method.
	GatewayFunctionsHistogramFunc func(labels map[string]string, duration time.Duration)

	// ServiceReplicasCounterFunc mocks the ServiceReplicasCounter method.
	ServiceReplicasCounterFunc func(labels map[string]string, replicas float64)

	// calls tracks calls to the methods.
	calls struct {
		// GatewayFunctionInvocation holds details about calls to the GatewayFunctionInvocation method.
		GatewayFunctionInvocation []struct {
			// Labels is the labels argument value.
			Labels map[string]string
		}
		// GatewayFunctionsHistogram holds details about calls to the GatewayFunctionsHistogram method.
		GatewayFunctionsHistogram []struct {
			// Labels is the labels argument value.
			Labels map[string]string
			// Duration is the duration argument value.
			Duration time.Duration
		}
		// ServiceReplicasCounter holds details about calls to the ServiceReplicasCounter method.
		ServiceReplicasCounter []struct {
			// Labels is the labels argument value.
			Labels map[string]string
			// Replicas is the replicas argument value.
			Replicas float64
		}
	}
}

// GatewayFunctionInvocation calls GatewayFunctionInvocationFunc.
func (mock *MetricsMock) GatewayFunctionInvocation(labels map[string]string) {
	if mock.GatewayFunctionInvocationFunc == nil {
		panic("moq: MetricsMock.GatewayFunctionInvocationFunc is nil but Metrics.GatewayFunctionInvocation was just called")
	}
	callInfo := struct {
		Labels map[string]string
	}{
		Labels: labels,
	}
	lockMetricsMockGatewayFunctionInvocation.Lock()
	mock.calls.GatewayFunctionInvocation = append(mock.calls.GatewayFunctionInvocation, callInfo)
	lockMetricsMockGatewayFunctionInvocation.Unlock()
	mock.GatewayFunctionInvocationFunc(labels)
}

// GatewayFunctionInvocationCalls gets all the calls that were made to GatewayFunctionInvocation.
// Check the length with:
//     len(mockedMetrics.GatewayFunctionInvocationCalls())
func (mock *MetricsMock) GatewayFunctionInvocationCalls() []struct {
	Labels map[string]string
} {
	var calls []struct {
		Labels map[string]string
	}
	lockMetricsMockGatewayFunctionInvocation.RLock()
	calls = mock.calls.GatewayFunctionInvocation
	lockMetricsMockGatewayFunctionInvocation.RUnlock()
	return calls
}

// GatewayFunctionsHistogram calls GatewayFunctionsHistogramFunc.
func (mock *MetricsMock) GatewayFunctionsHistogram(labels map[string]string, duration time.Duration) {
	if mock.GatewayFunctionsHistogramFunc == nil {
		panic("moq: MetricsMock.GatewayFunctionsHistogramFunc is nil but Metrics.GatewayFunctionsHistogram was just called")
	}
	callInfo := struct {
		Labels   map[string]string
		Duration time.Duration
	}{
		Labels:   labels,
		Duration: duration,
	}
	lockMetricsMockGatewayFunctionsHistogram.Lock()
	mock.calls.GatewayFunctionsHistogram = append(mock.calls.GatewayFunctionsHistogram, callInfo)
	lockMetricsMockGatewayFunctionsHistogram.Unlock()
	mock.GatewayFunctionsHistogramFunc(labels, duration)
}

// GatewayFunctionsHistogramCalls gets all the calls that were made to GatewayFunctionsHistogram.
// Check the length with:
//     len(mockedMetrics.GatewayFunctionsHistogramCalls())
func (mock *MetricsMock) GatewayFunctionsHistogramCalls() []struct {
	Labels   map[string]string
	Duration time.Duration
} {
	var calls []struct {
		Labels   map[string]string
		Duration time.Duration
	}
	lockMetricsMockGatewayFunctionsHistogram.RLock()
	calls = mock.calls.GatewayFunctionsHistogram
	lockMetricsMockGatewayFunctionsHistogram.RUnlock()
	return calls
}

// ServiceReplicasCounter calls ServiceReplicasCounterFunc.
func (mock *MetricsMock) ServiceReplicasCounter(labels map[string]string, replicas float64) {
	if mock.ServiceReplicasCounterFunc == nil {
		panic("moq: MetricsMock.ServiceReplicasCounterFunc is nil but Metrics.ServiceReplicasCounter was just called")
	}
	callInfo := struct {
		Labels   map[string]string
		Replicas float64
	}{
		Labels:   labels,
		Replicas: replicas,
	}
	lockMetricsMockServiceReplicasCounter.Lock()
	mock.calls.ServiceReplicasCounter = append(mock.calls.ServiceReplicasCounter, callInfo)
	lockMetricsMockServiceReplicasCounter.Unlock()
	mock.ServiceReplicasCounterFunc(labels, replicas)
}

// ServiceReplicasCounterCalls gets all the calls that were made to ServiceReplicasCounter.
// Check the length with:
//     len(mockedMetrics.ServiceReplicasCounterCalls())
func (mock *MetricsMock) ServiceReplicasCounterCalls() []struct {
	Labels   map[string]string
	Replicas float64
} {
	var calls []struct {
		Labels   map[string]string
		Replicas float64
	}
	lockMetricsMockServiceReplicasCounter.RLock()
	calls = mock.calls.ServiceReplicasCounter
	lockMetricsMockServiceReplicasCounter.RUnlock()
	return calls
}
